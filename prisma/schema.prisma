generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String            @id @default(cuid())
  name             String?
  email            String            @unique
  password         String?
  emailVerified    DateTime?
  image            String?
  role             Role              @default(USER)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  accounts         Account[]
  agent            Agent?
  Authenticator    Authenticator[]
  sessions         Session[]
  AgentApplication AgentApplication?
  comments         Comment[]
  Review           Review[]
  stripeCustomerId String?
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Agent {
  id          String   @id @default(cuid())
  userId      String   @unique
  fullName    String
  phone       String
  dateOfBirth DateTime
  gender      Gender
  address     String
  locality    String // approved area of operation
  nationalId  String?
  idType      String?
  idUrl       String?
  joinedAt    DateTime @default(now())

  user       User       @relation(fields: [userId], references: [id])
  properties Property[]
}

enum Gender {
  MALE
  FEMALE
}

enum ApplicationStatus {
  PENDING
  INTERVIEW_SCHEDULED
  APPROVED
  REJECTED
}

model AgentApplication {
  id                  String            @id @default(cuid())
  userId              String
  firstName           String
  lastName            String
  phone               Int
  dateOfBirth         DateTime
  gender              Gender
  nationalIdNumber    String
  proofOfIdentityUrl  String // e.g. uploaded ID file
  proofOfIdentityType String // e.g. "pdf", "jpg"
  address             String
  videoUrl            String
  desiredLocality     String // Where agent wants to operate
  experience          Int? // e.g. "2 years managing rental homes"
  motivation          String // Why they want to be an agent
  pastRoles           String? // Optional background
  status              ApplicationStatus @default(PENDING)
  interviewDate       DateTime?
  reviewerNote        String?
  appliedAt           DateTime          @default(now())

  user User @relation(fields: [userId], references: [id])
}

enum PropertyStatus {
  ACTIVE
  DRAFT
  EXPIRED
}

model Property {
  id           String         @id @default(cuid())
  title        String
  slug         String         @unique
  description  String
  images       String[]
  videos       String[]
  propertyType PropertyType
  bedrooms     Int
  bathrooms    Int
  area         Float
  tags         String[]
  price        Float
  status       PropertyStatus @default(DRAFT)
  furnished    Boolean        @default(false)
  available    Boolean        @default(true)
  isFeatured   Boolean        @default(false)
  published    Boolean        @default(false)
  views        Int            @default(0)
  listDuration Int

  city      String
  state     String
  country   String
  address   String
  latitude  Float?
  longitude Float?
  comments  Comment[]
  listedAt  DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  reviews Review[]
  agentId String
  agent   Agent    @relation(fields: [agentId], references: [id])
}

model Review {
  id        String   @id @default(cuid())
  rating    Int      @default(5) // 1 to 5 stars
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  propertyId String
  property   Property @relation(fields: [propertyId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])
}

enum PropertyType {
  APARTMENT
  HOUSE
  STUDIO
  DUPLEX
  COMMERCIAL
  LAND
}

enum Role {
  USER
  AGENT
  ADMIN
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Foreign Keys
  userId     String
  propertyId String

  // Relations
  user     User     @relation(fields: [userId], references: [id])
  property Property @relation(fields: [propertyId], references: [id])
}
